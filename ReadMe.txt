Peatit

See if you’re up for the challenge of playing Peatit. In this memory game, you must use sound and memory to find the correct order of four dots. You can play in easy mode to just find the right order, or for a challenge, play in hard mode which challenges you to remember where the dots are on the screen and to figure out the correct order.

It was very difficult to figure out how to have to Meggy recognize when dots had been visited in a certain order. I was surprised that many of the solutions to my problems didn’t involve learning entirely new concepts; instead, I often had to fix my formatting, e.g., using a different amount of equal signs or brackets. Collaborating with my classmates was a great way to solve problems because I always had new pairs of fresh eyes that could look at my problem in new ways and help me to solve it. I learned a lot of new techniques and skills from teachers like Mr. Kiang which helped me to enhance my game. I don’t think there are any bugs in the game. At one point, I was trying to show an animation that looped, but this ended up being a major bug because it forced the player to watch a long animation with only a second to escape from watching it endlessly, so I replaced this component. If I had more time, I would’ve liked to made the rewards even more fun, such as LEDs that lit up after beating a level. I may’ve tried to incorporate more challenges too, such as some basic distraction dots so that the game would be even more challenging for people who wanted it to be. This game taught me a lot about booleans and how useful they are. By making variables true or false based on the player’s actions, the game feels so much more interactive. This game also made me aware of how important it is in game design to consider every possible way a user might play the game. It would’ve been a lot easier to code this game if I was only coding it for one type of gamer, but by making the game work for multiple different strategies, the game is fun for so many more people. The objective of this game changed a few times before its final release because I started to realize there were things I couldn’t realistically code or things that wouldn’t be fun in the game. Like in life, things don’t always end up how you think they will in the beginning, but it’s about how we deal with changes that life throws our way that defines us as programmers and people.